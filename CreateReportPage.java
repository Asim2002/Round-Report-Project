package IAPackage;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;
import javax.swing.JOptionPane;

public class CreateReportPage extends javax.swing.JFrame {

    /**
     * Creates new form CreateReportPage
     */
    public CreateReportPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        clickToCreateRoundReport = new javax.swing.JButton();
        processInput = new javax.swing.JTextField();
        tournamentInput = new javax.swing.JTextField();
        debaterInput = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Would you like to see the process?");

        jLabel3.setText("Type in the tournament's name with its year:");

        jLabel4.setText("Type in the debater's name:");

        clickToCreateRoundReport.setText("Create round report!");
        clickToCreateRoundReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickToCreateRoundReportActionPerformed(evt);
            }
        });

        backButton.setText("Click here to go back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(clickToCreateRoundReport))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(backButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(processInput, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                                .addComponent(tournamentInput)
                                .addComponent(debaterInput))
                            .addComponent(quitButton))))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(quitButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(processInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tournamentInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(debaterInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(clickToCreateRoundReport)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creates a round report and stores in a text file
     * @param evt 
     */
    private void clickToCreateRoundReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickToCreateRoundReportActionPerformed
        //The following stores my coach's login, the laptop address where ChromeDriver, a download used to automate tabroom.com,
        //the website with the debate round information, is stored, and the laptop address where the user wants the ballot to be
        File file = new File("sensitiveInformation.in");
        Scanner stores;
        try {
            stores = new Scanner(file);
            String username = stores.nextLine();
            String password = stores.nextLine();
            
            file = new File("chromeDriverAddress.in");
            stores = new Scanner(file);
            String chromeDriverAddress = stores.nextLine();
            
            file = new File("reportAddress.in");
            stores = new Scanner(file);
            String reportAddress = stores.nextLine(); 
            
        //Checks if the user provided input
        if (processInput.getText().isEmpty() || tournamentInput.getText().isEmpty() || debaterInput.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter information for all of the fields.");
        } else {
        String desiredProcess = processInput.getText();
        String desiredTournament = tournamentInput.getText();
        String desiredDebater = debaterInput.getText();
        //Notifies the user the information was processed
        JOptionPane.showMessageDialog(null, "Compiling a report for " + desiredDebater + "'s " + "rounds at " + desiredTournament + ". "
                + "See " + reportAddress + " in about a minute or two for the round report.");
        
        //Creates the necessary IDs for extraction by creating debater, tournament, and round objects that call the necessary methods
        Debater debater = new Debater(desiredDebater);
        Tournament tournament = new Tournament(desiredTournament);
        Round round = new Round(desiredDebater, desiredTournament);
        int debaterID = debater.getID();
        int tournamentID = tournament.getID();
        String extractionID = round.getExtractionID();
        boolean shortReport;
        
        //1. If the extraction ID is null, that implies that the user-requested information does not exist, 
        //because there is no table with the requested information
        //2. However, the extraction ID is based on the table-specific files (tableDebaters, tableTournaments, tableIDs),
        //and the tableIDs file has to be updated manually.
        //3. If the user added a debater and tournament combination that does not have an extraction ID yet, then a debater and
        //tournament ID is created as well, because the user adds data to the NON-table-specific files (debaterNames, debaterIDs,
        //tournamentNames, tournamentIDs)
        //4. This would mean that information does exist about the debater and tournament, but just that the table ID has not been
        //added to the file. 
        //This is the purpose of shortReport. If the extractionID is null, shortReport is true. The program navigates to the correct
        //URL based on the debater and tournament ID. However, because there is no extraction ID, it only outputs the basic data
        //of the table (which means it is a short report),
        //as accessing the URLs with the judge comments requires an extraction ID in this program.
        //If it is just an incorrect combination, the exception will say "This debater did not go to this tournament"
        //or the round report with be blank.
        if (extractionID == null) {
            shortReport = true;
        } else {
            shortReport = false;
        }
        
        //Sets the output to be printed in the file requested by the user
        PrintStream myconsole = new PrintStream(
                new File(reportAddress));
        System.setOut(myconsole);
        //Causes the automation and data extraction process by creating a website object to call the createRoundReport method
        Website website = new Website(username, password, chromeDriverAddress, debaterID, tournamentID, extractionID, desiredProcess, shortReport);
        JOptionPane.showMessageDialog(null, "Report complete! If the report is empty, the debater did not go to this tournament.");
        setVisible(false);
        new OptionsPage().setVisible(true);
        }
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Something is wrong.");
        }
        
        
    }//GEN-LAST:event_clickToCreateRoundReportActionPerformed
    
    /**
     * Takes the user to the previous JFrame
     * @param evt 
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        setVisible(false);
        new OptionsPage().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * Quits the program
     * @param evt 
     */
    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    /**
     * Sets the JFrame where the user can create a round report visible
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateReportPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateReportPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateReportPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateReportPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateReportPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton clickToCreateRoundReport;
    private javax.swing.JTextField debaterInput;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField processInput;
    private javax.swing.JButton quitButton;
    private javax.swing.JTextField tournamentInput;
    // End of variables declaration//GEN-END:variables
}
